<?xml version="1.0"?>
<DriverProps>

  <!-- control the fiting across t_ins -->

  <threePointComparatorProps>
    <fit_type>const</fit_type>                        <!-- more options in jackfitter, threepoint_something.h -->
    <baseProp>CompareFitsByChisqPerNDoF</baseProp>    <!-- basic fit comparator -->
    <biasProp>none</biasProp>                         <!-- add some bias function to the comparator as a function of fit range (try to bias toward middle?) -->
    <extraProps>                                      <!-- multiply extra bits on the comparator - ie smaller errors on the constant etc -->
    </extraProps>                                       
    <tlow>0</tlow>                                    <!-- fit range, should be less than or equal to correlator length --> 
    <thigh>28</thigh>
    <minTSlice>7</minTSlice>
  </threePointComparatorProps>


  <!-- specify enough about the source and sink so radmat can make redstar xml --> 

  <threePointIni> 
    <threePointCorrXMLIni>


      <continuumMatElemXML>

        <sink>
          <state>
            <J>0</J>
            <H></H>
            <parity>false</parity>
            <fill_star>false</fill_star>    <!-- do we want to consider all the rotations of the provided momentum -->
            <mom>
              <elem>0 0 0</elem>
              <elem>1 0 0</elem>
              <elem>1 1 0</elem>
              <elem>1 1 1</elem>
              <elem>2 0 0</elem>
            </mom>
            <twoI_z>2</twoI_z>
            <op_stem>pion_proj0</op_stem>
            <creation_op>false</creation_op>
            <smearedP>true</smearedP>
            <isProjected>true</isProjected>
          </state>
          <t_slice>28</t_slice>
        </sink>



        <insertion>
          <pmin>0</pmin>
          <pmax>0</pmax> <!-- don't consider matrix elements w/ q^2_space > pmax-->
          <t_slice>-3</t_slice>
          <time>
            <active>true</active>               <!-- on or off -->
            <J>0</J>
            <H></H>
            <parity>true</parity>
            <photons>
              <elem> 
                <charge_coefficient>1.</charge_coefficient>  <!-- a prefactor for this op -->
                <op_stem>b_b0xD0_J0__J0</op_stem>
                <twoI_z>0</twoI_z>
              </elem>            
              <elem> 
                <charge_coefficient>1.</charge_coefficient>  <!-- a prefactor for this op -->
                <op_stem>hl_b0xD0_J0__J0</op_stem>
                <twoI_z>0</twoI_z>
              </elem>            
            </photons>
            <creation_op>true</creation_op>
            <smearedP>false</smearedP>
          </time>
          <space>
            <active>true</active>
            <J>1</J>
            <H></H>
            <parity>false</parity>
            <photons>
              <elem>
                <charge_coefficient>1.</charge_coefficient>
                <op_stem>rho_rhoxD0_J0__J1</op_stem>
                <twoI_z>0</twoI_z>
              </elem>
              <elem>
                <charge_coefficient>1.</charge_coefficient>
                <op_stem>omegal_rhoxD0_J0__J1</op_stem>
                <twoI_z>0</twoI_z>
              </elem>
            </photons>
            <creation_op>true</creation_op>
            <smearedP>false</smearedP>
          </space>
        </insertion>

        <source>
          <state>
            <J>0</J>
            <H></H>
            <parity>false</parity>
            <fill_star>false</fill_star>
            <mom>
              <elem>0 0 0</elem>
              <elem>1 0 0</elem>
              <elem>1 1 0</elem>
              <elem>1 1 1</elem>
              <elem>2 0 0</elem>
            </mom>
            <twoI_z>2</twoI_z>
            <op_stem>pion_proj0</op_stem>
            <creation_op>true</creation_op>
            <smearedP>true</smearedP>
            <isProjected>true</isProjected>
          </state>
          <t_slice>0</t_slice>
        </source>

        <ensemble>szscl3_16_128_b1p50_t_x4p300_um0p0743_n1p265_per</ensemble>
      </continuumMatElemXML>

      <!-- for constructing a mean Q^2 on the fly via a simple boost --> 
      <sink_id>pion</sink_id>
      <maSink>0.148382</maSink>

      <source_id>pion</source_id>
      <maSource>0.148382</maSource>

      <cubicSymmetry>false</cubicSymmetry>
      <gParitySymmetry>false</gParitySymmetry>


    </threePointCorrXMLIni>


    <!-- ingredient list --> 

    <radmatDBProp>
      <threePointDatabase>
        <dbname>stub</dbname>
        <badlist>bad_corrs.xml</badlist>
      </threePointDatabase>
      <normalizationDatabase>
        <dbname>stub</dbname>
        <badlist>bad_norms.xml</badlist>
      </normalizationDatabase>

      <!-- is the overlap for Z* the same as for Z (did we do the full rephasing?) -->
      <allow_daggering>true</allow_daggering>

      <!-- do all the rows in a given irrep have the same values for Z and E (they better)-->
      <!-- this also applies to all momenta related by an allowed lattice rotation (the star of p ) -->
      <LG_symmetry>true</LG_symmetry>
    </radmatDBProp>

    <!-- specify a decomposition RhoPi means Vector to Pseudo-Scalar,  PiRho would be Pseudo-Scalar to Vector, either roll your own or use the ones provided --> 

    <matElemID>PiPi</matElemID>

    <!-- anisotropy --> 

    <xi>3.45</xi>

    <!-- spatial extent in integer --> 

    <L_s>16</L_s>
  </threePointIni>

  <maxThread>2</maxThread>

  <!-- energy of lightest vector or branch cut from two pions -->
  <poleMass>0.216166</poleMass>

</DriverProps>
